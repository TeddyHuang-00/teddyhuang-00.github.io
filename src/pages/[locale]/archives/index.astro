---
import { getCollection } from "astro:content";
import type { GetStaticPaths } from "astro";
import Card from "@/components/Card.astro";
import Footer from "@/components/Footer.astro";
import Header from "@/components/Header.astro";
import { SITE } from "@/config";
import { useTranslations } from "@/i18n/utils";
import Layout from "@/layouts/Layout.astro";
import Main from "@/layouts/Main.astro";
import getPostsByGroupCondition from "@/utils/getPostsByGroupCondition";

export const getStaticPaths = (async () => {
  return Object.keys(SITE.locales).map((lang) => ({
    params: { locale: lang as keyof typeof SITE.locales },
  }));
}) satisfies GetStaticPaths;

const { locale } = Astro.params;
const localeString = useTranslations(locale);

// Redirect to 404 page if `showArchives` config is false
if (!SITE.showArchives) {
  return Astro.redirect(getRelativeLocaleUrl(locale, "/404"));
}

const posts = await getCollection(
  "blog",
  ({ data }) => !data.draft && data.locale === locale
);

const months = Array.from({ length: 12 }, (_, i) =>
  localeString(`months.${i + 1}` as keyof typeof localeString)
);
---

<Layout
  title={`${localeString("nav.archives")} | ${localeString("site.title")}`}
>
  <Header />
  <Main
    pageTitle={localeString("nav.archives")}
    pageDesc={localeString("archives.description")}
  >
    {
      Object.entries(
        getPostsByGroupCondition(posts, (post) =>
          post.data.pubDatetime.getFullYear()
        )
      )
        .sort(([yearA], [yearB]) => Number(yearB) - Number(yearA))
        .map(([year, yearGroup]) => (
          <div>
            <span class="text-2xl font-bold">{year}</span>
            <sup class="text-sm">{yearGroup.length}</sup>
            {Object.entries(
              getPostsByGroupCondition(
                yearGroup,
                (post) => post.data.pubDatetime.getMonth() + 1
              )
            )
              .sort(([monthA], [monthB]) => Number(monthB) - Number(monthA))
              .map(([month, monthGroup]) => (
                <div class="flex flex-col sm:flex-row">
                  <div class="mt-6 text-lg sm:my-6 min-w-36">
                    <span class="font-bold">{months[Number(month) - 1]}</span>
                    <sup class="text-xs">{monthGroup.length}</sup>
                  </div>
                  <ul>
                    {monthGroup
                      .sort(
                        (a, b) =>
                          Math.floor(
                            new Date(b.data.pubDatetime).getTime() / 1000
                          ) -
                          Math.floor(
                            new Date(a.data.pubDatetime).getTime() / 1000
                          )
                      )
                      .map((data) => (
                        <Card {...data} />
                      ))}
                  </ul>
                </div>
              ))}
          </div>
        ))
    }
  </Main>
  <Footer />
</Layout>
