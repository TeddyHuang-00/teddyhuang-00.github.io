---
import { Icon } from "astro-icon/components";
import dayjs from "dayjs";
import localizedFormat from "dayjs/plugin/localizedFormat";
import timezone from "dayjs/plugin/timezone";
import utc from "dayjs/plugin/utc";
import { SITE } from "@/config";
import { getLangFromUrl, useTranslations } from "@/i18n/utils";
import "dayjs/locale/zh";
import "dayjs/locale/en";

dayjs.extend(utc);
dayjs.extend(timezone);
dayjs.extend(localizedFormat);

export interface Props {
  class?: string;
  size?: "sm" | "lg";
  timezone: string | undefined;
  pubDatetime: string | Date;
  modDatetime: string | Date | undefined | null;
}

const {
  pubDatetime,
  modDatetime,
  size = "sm",
  class: className = "",
  timezone: postTimezone,
} = Astro.props;

const locale = getLangFromUrl(Astro.url);
const localeString = useTranslations(locale);

/* ========== Formatted Datetime ========== */
const isModified = modDatetime && modDatetime > pubDatetime;

const datetime = dayjs(isModified ? modDatetime : pubDatetime)
  .tz(postTimezone || SITE.timezone)
  .locale(locale);
const date = datetime.format("ll"); // e.g., 'Mar 22, 2025' or '2025年3月22日'
---

<div class:list={["flex items-center gap-x-2 opacity-80", className]}>
  <Icon
    name="tabler:calendar"
    class:list={[
      "inline-block size-6 min-w-[1.375rem]",
      { "scale-90": size === "sm" },
    ]}
  />
  {
    isModified && (
      <span class:list={["text-sm", { "sm:text-base": size === "lg" }]}>
        {localeString("datetime.updated")}:
      </span>
    )
  }
  <time
    class:list={["text-sm", { "sm:text-base": size === "lg" }]}
    datetime={datetime.toISOString()}>{date}</time
  >
</div>
